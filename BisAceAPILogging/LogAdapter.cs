using System;
namespace BisAceAPILogging
{
    /// <summary>
    /// A wrapper around <see cref="ILog"></see> that enables usage with DI
    /// </summary>
    /// <typeparam name="T">The type that is requesting a log instance</typeparam>
    /// <seealso cref="BisAceAPILogging.ILog" />
    /// <example>
    /// Adding to Simple Injector
    /// 
    /// _container.RegisterConditional(typeof(ILog),
    ///     c => typeof(LogAdapter{T}).MakeGenericType(c.Consumer.ImplementationType),
    ///     Lifestyle.Singleton,
    ///     c => true);
    /// 
    /// An instance of ILog can then be provided if requested to any classes using DI via simple injector
    /// </example>
    public sealed class LogAdapter<T> : ILog
    {
        //the actual logger
        private ILog _log = LogProvider.For<T>();

        /// <summary>
        /// Log a message the specified log level.
        /// </summary>
        /// <param name="logLevel">The log level.</param>
        /// <param name="messageFunc">The message function.</param>
        /// <param name="exception">An optional exception.</param>
        /// <param name="formatParameters">Optional format parameters for the message generated by the messagefunc.</param>
        /// <returns>
        /// true if the message was logged. Otherwise false.
        /// </returns>
        /// <remarks>
        /// Note to implementers: the message func should not be called if the loglevel is not enabled
        /// so as not to incur performance penalties.
        /// To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
        /// </remarks>
        public bool Log(LogLevel logLevel, Func<string> messageFunc, Exception exception = null, params object[] formatParameters)
        {
            return _log.Log(logLevel, messageFunc, exception, formatParameters);
        }
    }
}
